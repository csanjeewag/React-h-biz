{"version":3,"sources":["component/Demo.js","App.js","serviceWorker.js","index.js"],"names":["App","props","state","token","theme","console","log","microsoftTeams","context","this","setState","Promise","resolve","reject","getAuthToken","successCallback","result","failureCallback","error","then","clientSideToken","catch","err","React","Component","BlogPost","slug","useParams","className","to","type","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","href","tabindex","aria-disabled","exact","path","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"gVAuFeA,E,YAxDb,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAM,QACNC,MAAM,IAJS,E,iFASC,IAAD,OACjBC,QAAQC,IAAI,cACZC,eACAF,QAAQC,IAAI,gBACZC,cAA0B,SAAUC,GAE9BA,GAAWA,EAAQJ,OAEnBC,QAAQC,IAAIE,GACZC,KAAKC,SAAS,CACZP,MAAQK,EAAQJ,SAGpBC,QAAQC,IAAI,eA5CX,IAAIK,SAAQ,SAACC,EAASC,GAEzBR,QAAQC,IAAI,0CAEZC,iBAA8BO,aAAa,CACvCC,gBAAiB,SAACC,GAGdJ,EAAQI,IAEZC,gBAAiB,SAAUC,GACvBL,EAAO,wBAA0BK,GACjCb,QAAQC,IAAI,6BAqCjBa,MAAK,SAACC,GACLf,QAAQC,IAAIc,GAEZ,EAAKV,SAAS,CACZP,MAAQiB,OAIXC,OAAM,SAACC,GACJjB,QAAQC,IAAIgB,Q,+BAQpB,OACE,uCACE,oCACA,6BAAMb,KAAKP,MAAMC,OAEjB,oCACA,6BAAMM,KAAKP,MAAME,Y,GApDPmB,IAAMC,WChBxB,SAASC,IAAY,IACbC,EAASC,cAATD,KACN,OAAO,iDAAuBA,GAmDjB1B,MAhDf,WACE,OACE,yBAAK4B,UAAU,OAGb,kBAAC,IAAD,KACE,yBAAKA,UAAU,iDACb,yBAAKA,UAAU,mBAEb,kBAAC,IAAD,CAAMA,UAAU,eAAeC,GAAG,KAAlC,cACA,4BAAQD,UAAU,iBAAiBE,KAAK,SAASC,iBAAe,WAAWC,iBAAe,aAAaC,gBAAc,YAAYC,gBAAc,QAAQC,aAAW,qBAChK,0BAAMP,UAAU,yBAElB,yBAAKA,UAAU,2BAA2BQ,GAAG,aAC3C,wBAAIR,UAAU,cACZ,wBAAIA,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,gBAA9B,SAEF,wBAAID,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,wBAA9B,YAEF,wBAAID,UAAU,YACZ,kBAAC,IAAD,CAAMA,UAAU,WAAWC,GAAG,iBAA9B,WAEF,wBAAID,UAAU,YACZ,uBAAGA,UAAU,oBAAoBS,KAAK,IAAIC,SAAS,KAAKC,gBAAc,QAAtE,iBAOV,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,gBAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOD,OAAK,EAACC,KAAK,wBAChB,kBAAC,EAAD,OAEF,kBAAC,IAAD,CAAOA,KAAK,gBACV,kBAAChB,EAAD,WC9CQiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlC,MAAK,SAAAmC,GACjCA,EAAaC,kB","file":"static/js/main.dcb01e9b.chunk.js","sourcesContent":["import React from 'react';\r\nimport * as microsoftTeams from \"@microsoft/teams-js\";\r\nimport './../App.css';\r\n\r\n\r\n\r\n\r\nfunction getClientSideToken() {\r\n\r\n  return new Promise((resolve, reject) => {\r\n\r\n      console.log(\"1. Get auth token from Microsoft Teams\");\r\n\r\n      microsoftTeams.authentication.getAuthToken({\r\n          successCallback: (result) => {\r\n              //display(result)\r\n              //console.log(result);\r\n              resolve(result);\r\n          },\r\n          failureCallback: function (error) {\r\n              reject(\"Error getting token: \" + error);\r\n              console.log('Error getting token');\r\n          }\r\n      });\r\n\r\n  });\r\n\r\n}\r\n\r\nclass App extends React.Component {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = { \r\n      token:'token',\r\n      theme:''\r\n   }\r\n\r\n  }\r\n\r\n  componentDidMount(){\r\n    console.log('demo color')\r\n    microsoftTeams.initialize();\r\n    console.log('demo color2 ')\r\n    microsoftTeams.getContext(function (context) {\r\n  \r\n      if (context && context.theme) {\r\n    \r\n          console.log(context);\r\n          this.setState({\r\n            token : context.theme\r\n          })\r\n      }else{\r\n        console.log('no theme');\r\n      }\r\n  });\r\n\r\n  getClientSideToken()\r\n        .then((clientSideToken) => {\r\n          console.log(clientSideToken);\r\n\r\n          this.setState({\r\n            token : clientSideToken\r\n          })\r\n\r\n        })\r\n        .catch((err) => {\r\n            console.log(err)\r\n        })\r\n\r\n  };\r\n\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div> demo 3\r\n        <p>token</p>\r\n        <div>{this.state.token}</div>\r\n\r\n        <p>theme</p>\r\n        <div>{this.state.theme}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport {\r\n  BrowserRouter as Router,\r\n  Switch,\r\n  Route,\r\n  useParams,\r\n  Link\r\n} from \"react-router-dom\";\r\nimport Home from './component/Demo';\r\nimport './App.css';\r\n\r\n\r\nfunction BlogPost() {\r\n  let { slug } = useParams();\r\n  return <div>Now showing post {slug}</div>;\r\n}\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n\r\n\r\n      <Router>\r\n        <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\r\n          <div className=\"container-fluid\">\r\n            \r\n            <Link className=\"navbar-brand\" to=\"/\">Hsenid Biz</Link>\r\n            <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n              <span className=\"navbar-toggler-icon\"></span>\r\n            </button>\r\n            <div className=\"collapse navbar-collapse\" id=\"navbarNav\">\r\n              <ul className=\"navbar-nav\">\r\n                <li className=\"nav-item\">\r\n                  <Link className=\"nav-link\" to=\"/React-h-biz\">Home</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <Link className=\"nav-link\" to=\"/React-h-biz/ssoDemo\">ssoDemo</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <Link className=\"nav-link\" to=\"/config/:slug\">Config</Link>\r\n                </li>\r\n                <li className=\"nav-item\">\r\n                  <a className=\"nav-link disabled\" href=\"#\" tabindex=\"-1\" aria-disabled=\"true\">Disabled</a>\r\n                </li>\r\n              </ul>\r\n            </div>\r\n          </div>\r\n        </nav>\r\n\r\n        <Switch>\r\n          <Route exact path=\"/React-h-biz\">\r\n            <Home />\r\n          </Route>\r\n          <Route exact path=\"/React-h-biz/ssoDemo\">\r\n            <Home />\r\n          </Route>\r\n          <Route path=\"config/:slug\">\r\n            <BlogPost />\r\n          </Route>\r\n        </Switch>\r\n      </Router>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}